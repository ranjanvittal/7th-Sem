//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepth5<R,A> extends GJDepthFirst<R, A> {
    //
    // Auto class visitors--probably don't need to be overridden.
    //
    ClassInfo classInfo;
    ClassExtendsDeclaration inp;
    Set<String> current_variables;
    String wanted_class;
    String wanted_variable;
    int var_count = 0;
    boolean extra_print;
    String methodString;
    String variableString;

    public String new_var() {
        var_count++;
        return "final_" + Integer.toString(var_count);
    }

    public void __print(String s) {
        System.out.print(s);
    }

    public void __println(String s) {
        System.out.println(s);
    }

    public void __print__(String s) {
        System.out.println(s);
    }

    public void ptm(String s) {
        methodString += s + "\n";
    }

    public void addVariable(String id, String type) {
        variableString += type + " " + id + ";\n";
    }

    public R visit(NodeList n, A argu) {
        R _ret=null;
        int _count=0;
        for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
        }
        return _ret;
    }

    public R visit(NodeListOptional n, A argu) {
        if ( n.present() ) {
            R _ret=null;
            int _count=0;
            for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
                e.nextElement().accept(this,argu);
                _count++;
            }
            return _ret;
        }
        else
            return null;
    }

    public R visit(NodeOptional n, A argu) {
        if ( n.present() )
            return n.node.accept(this,argu);
        else
            return null;
    }

    public R visit(NodeSequence n, A argu) {
        R _ret=null;
        int _count=0;
        for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
        }
        return _ret;
    }

    public R visit(NodeToken n, A argu) { return null; }

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "extends"
     * f3 -> Identifier()
     * f4 -> "{"
     * f5 -> ( VarDeclaration() )*
     * f6 -> ( MethodDeclaration() )*
     * f7 -> "}"
     */
    public R visit(ClassExtendsDeclaration n, A argu) {
        R _ret=null;
        inp = n;
        current_variables = new HashSet<String>();
        globalClassInfo = (Hashtable<String, ClassInfo>) argu;
        __print("class ");
        String className = (String) n.f1.accept(this, argu);
        __print(className + " extends ");
        String parent = (String) n.f3.accept(this, argu);
        __println(parent + " {");
        n.f5.accept(this, argu);
        n.f6.accept(this, argu);
        __println("}");
        return _ret;
    }

    /**
     * f0 -> Type()
     * f1 -> Identifier()
     * f2 -> ";"
     */
    public R visit(VarDeclaration n, A argu) {
        R _ret=null;
        String t = (String) n.f0.accept(this, argu);
        String id = (String) n.f1.accept(this, argu);
        __println(t + " " + id + ";");
        current_variables.add(id);
        if(n.f1.f0.toString().startsWith("latest")) {
            wanted_class = ((Identifier) n.f0.f0.choice).f0.toString();
            wanted_variable = n.f1.f0.toString();
            classInfo = globalClassInfo.get(wanted_class);
        }
        return _ret;
    }

    /**
     * f0 -> "public"
     * f1 -> "void"
     * f2 -> Identifier()
     * f3 -> "("
     * f4 -> ( FormalParameterList() )?
     * f5 -> ")"
     * f6 -> "{"
     * f7 -> ( VarDeclaration() )*
     * f8 -> ( Statement() )*
     * f9 -> "}"
     */
    public R visit(MethodDeclaration n, A argu) {
        R _ret=null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        __print("public void ");
        String method = (String) n.f2.accept(this, argu);
        __print(method + "(");
        n.f4.accept(this, argu);
        __println(") {");
        variableString = "";
        methodString = "";
        n.f7.accept(this, argu);
        n.f8.accept(this, argu);
        __println(variableString + methodString + "}");
        return _ret;
    }

    /**
     * f0 -> FormalParameter()
     * f1 -> ( FormalParameterRest() )*
     */
    public R visit(FormalParameterList n, A argu) {
        R _ret=null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Type()
     * f1 -> Identifier()
     */
    public R visit(FormalParameter n, A argu) {
        R _ret=null;
        String type = (String) n.f0.accept(this, argu);
        String id = (String) n.f1.accept(this, argu);
        __print(type + " " + id);
        return _ret;
    }

    /**
     * f0 -> ","
     * f1 -> FormalParameter()
     */
    public R visit(FormalParameterRest n, A argu) {
        R _ret=null;
        __print(", ");
        n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> ArrayType()
     *         | BooleanType()
     *         | IntegerType()
     *         | Identifier()
     */
    public R visit(Type n, A argu) {
        return n.f0.accept(this, argu);
    }

    /**
     * f0 -> "int"
     * f1 -> "["
     * f2 -> "]"
     */
    public R visit(ArrayType n, A argu) {
        R _ret=null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        String type = "int[]";
        return (R) type;
    }

    /**
     * f0 -> "boolean"
     */
    public R visit(BooleanType n, A argu) {
        R _ret=null;
        String type = "boolean";
        return (R) type;
    }

    /**
     * f0 -> "int"
     */
    public R visit(IntegerType n, A argu) {
        R _ret=null;
        String type = "int";
        return (R) type;
    }

    /**
     * f0 -> Block()
     *         | AssignmentStatement()
     *         | ArrayAssignmentStatement()
     *         | IfStatement()
     *         | WhileStatement()
     *         | PrintStatement()
     *         | MessageSendStatement()
     */
    public R visit(Statement n, A argu) {
        R _ret=null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "{"
     * f1 -> ( Statement() )*
     * f2 -> "}"
     */
    public R visit(Block n, A argu) {
        R _ret=null;
        ptm("{");
        n.f1.accept(this, argu);
        ptm("}");
        return _ret;
    }

    /**
     * f0 -> VarRef()
     * f1 -> "="
     * f2 -> Expression()
     * f3 -> ";"
     */
    public R visit(AssignmentStatement n, A argu) {
        R _ret=null;
        String id;
        if(n.f0.f0.which == 1) {
            id = (String) ((Identifier) n.f0.f0.choice).accept(this, argu);
            if(!current_variables.contains(id)) {
                id = wanted_variable + "." + id;
            }
        }
        else {
            id = ((DotExpression) n.f0.f0.choice).f0.f0.toString();
            String b = ((DotExpression) n.f0.f0.choice).f2.f0.toString();
            if(!current_variables.contains(id)) {
                String t = classInfo.type(id);
                String new_variable = new_var();
                addVariable(new_variable, t);
                ptm(new_variable + " = " + wanted_class + "." + id + ";");
                id = new_variable + "." + b;
            }
            else {
                id = (String) n.f0.accept(this, argu);
            }
        }
        String exp = (String) n.f2.accept(this, argu);
        ptm(id + " = " + exp + ";");
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "["
     * f2 -> Expression()
     * f3 -> "]"
     * f4 -> "="
     * f5 -> Expression()
     * f6 -> ";"
     */
    public R visit(ArrayAssignmentStatement n, A argu) {
        R _ret=null;
        String id = (String) n.f0.accept(this, argu);
        if(!current_variables.contains(id)) {
            String id2 = new_var();
            addVariable(id2, classInfo.type(id));
            ptm(id2 + " = " + wanted_variable + "." + id + ";");
            id = id2;
        }
        String exp1 = (String) n.f2.accept(this, argu);
        String exp2 = (String) n.f5.accept(this, argu);
        ptm(id + "[" + exp1 + "] = " +  exp2 + ";");
        return _ret;
    }

    /**
     * f0 -> "if"
     * f1 -> "("
     * f2 -> Expression()
     * f3 -> ")"
     * f4 -> Statement()
     * f5 -> "else"
     * f6 -> Statement()
     */
    public R visit(IfStatement n, A argu) {
        R _ret=null;
        String exp = (String) n.f2.accept(this, argu);
        ptm("if(" + exp + ")");
        n.f4.accept(this, argu);
        ptm("else");
        n.f6.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "System.out.println"
     * f1 -> "("
     * f2 -> Expression()
     * f3 -> ")"
     * f4 -> ";"
     */
    public R visit(PrintStatement n, A argu) {
        R _ret=null;
        String exp = (String) n.f2.accept(this, argu);
        ptm("System.out.println(" + exp + ");");
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "."
     * f2 -> Identifier()
     * f3 -> "("
     * f4 -> ( ExpressionList() )?
     * f5 -> ")"
     * f6 -> ";"
     */
    public R visit(MessageSendStatement n, A argu) {
        R _ret=null;
        String id = (String) n.f0.accept(this, argu);
        if(!current_variables.contains(id)) {
            String id2 = new_var();
            addVariable(id2, classInfo.type(id));
            ptm(id2 + " = " + wanted_variable + "." + id + ";");
            id = id2;
        }

        String id3 = (String) n.f2.accept(this, argu);
        String gen = "";
        if(n.f4.present()) {
            gen = (String) n.f4.accept(this, argu);
        }
        ptm(id + "." + id3 + "(" + gen + ");");
        return _ret;
    }

    /**
     * f0 -> AndExpression()
     *         | CompareExpression()
     *         | PlusExpression()
     *         | MinusExpression()
     *         | TimesExpression()
     *         | ArrayLookup()
     *         | PrimaryExpression()
     */
    public R visit(Expression n, A argu) {
        return n.f0.accept(this, argu);
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "&"
     * f2 -> PrimaryExpression()
     */
    public R visit(AndExpression n, A argu) {
        String id1 = (String) n.f0.accept(this, argu);
        String id2 = (String) n.f2.accept(this, argu);
        String s = id1 + " & " + id2;
        return (R) s;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "<"
     * f2 -> PrimaryExpression()
     */
    public R visit(CompareExpression n, A argu) {
        String id1 = (String) n.f0.accept(this, argu);
        String id2 = (String) n.f2.accept(this, argu);
        String s = id1 + " < " + id2;
        return (R) s;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "+"
     * f2 -> PrimaryExpression()
     */
    public R visit(PlusExpression n, A argu) {
        String id1 = (String) n.f0.accept(this, argu);
        String id2 = (String) n.f2.accept(this, argu);
        String s = id1 + " + " + id2;
        return (R) s;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "-"
     * f2 -> PrimaryExpression()
     */
    public R visit(MinusExpression n, A argu) {
        String id1 = (String) n.f0.accept(this, argu);
        String id2 = (String) n.f2.accept(this, argu);
        String s = id1 + " - " + id2;
        return (R) s;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "*"
     * f2 -> PrimaryExpression()
     */
    public R visit(TimesExpression n, A argu) {
        String id1 = (String) n.f0.accept(this, argu);
        String id2 = (String) n.f2.accept(this, argu);
        String s = id1 + " * " + id2;
        return (R) s;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "["
     * f2 -> PrimaryExpression()
     * f3 -> "]"
     */
    public R visit(ArrayLookup n, A argu) {
        R _ret=null;
        String exp1 = (String) n.f0.accept(this, argu);
        String exp2 = (String) n.f2.accept(this, argu);
        String s = exp1 + "[" + exp2 + "]";
        return (R) s;
    }

    /**
     * f0 -> Expression()
     * f1 -> ( ExpressionRest() )*
     */
    public R visit(ExpressionList n, A argu) {
        R _ret=null;
        String s = (String) n.f0.accept(this, argu);
        Enumeration<Node> node_list_optional = n.f1.elements();
        while(node_list_optional.hasMoreElements()) {
            s = s + (String) node_list_optional.nextElement().accept(this, argu);
        }
        return (R) s;
    }

    /**
     * f0 -> ","
     * f1 -> Expression()
     */
    public R visit(ExpressionRest n, A argu) {
        R _ret=null;
        String exp = ", ";
        exp += (String) n.f1.accept(this, argu);
        return (R) exp;
    }

    /**
     * f0 -> IntegerLiteral()
     *         | TrueLiteral()
     *         | FalseLiteral()
     *         | VarRef()
     *         | ThisExpression()
     *         | ArrayAllocationExpression()
     *         | AllocationExpression()
     *         | NotExpression()
     *         | BracketExpression()
     */
    public R visit(PrimaryExpression n, A argu) {
        return n.f0.accept(this, argu);
    }

    /**
     * f0 -> <INTEGER_LITERAL>
     */
    public R visit(IntegerLiteral n, A argu) {
        return (R) n.f0.toString();
    }

    /**
     * f0 -> "true"
     */
    public R visit(TrueLiteral n, A argu) {
        String t = "true";
        return (R) t;
    }

    /**
     * f0 -> "false"
     */
    public R visit(FalseLiteral n, A argu) {
        String f = "false";
        return (R) f;
    }

    /**
     * f0 -> <IDENTIFIER>
     */
    public R visit(Identifier n, A argu) {
        return (R) n.f0.toString();
    }

    /**
     * f0 -> "this"
     */
    public R visit(ThisExpression n, A argu) {
        return (R) wanted_variable;
    }

    /**
     * f0 -> "new"
     * f1 -> "int"
     * f2 -> "["
     * f3 -> Expression()
     * f4 -> "]"
     */
    public R visit(ArrayAllocationExpression n, A argu) {
        R _ret=null;
        String exp = (String) n.f3.accept(this, argu);
        String t = "new int[" + exp + "]";
        return (R) t;
    }

    /**
     * f0 -> "new"
     * f1 -> Identifier()
     * f2 -> "("
     * f3 -> ")"
     */
    public R visit(AllocationExpression n, A argu) {
        String id = (String) n.f1.accept(this, argu);
        id = "new " + id + "()";
        return (R) id;
    }

    /**
     * f0 -> "!"
     * f1 -> Expression()
     */
    public R visit(NotExpression n, A argu) {
        String exp = (String) n.f1.accept(this, argu);
        exp = "!" + exp;
        return (R) exp;
    }

    /**
     * f0 -> "("
     * f1 -> Expression()
     * f2 -> ")"
     */
    public R visit(BracketExpression n, A argu) {
        String exp = (String) n.f1.accept(this, argu);
        String r = "(" + exp + ")";
        return (R) r;
    }

    /**
     * f0 -> DotExpression()
     *         | Identifier()
     */
    public R visit(VarRef n, A argu) {
        R _ret=null;
        if(n.f0.which == 1) {
            String id = (String) n.f0.accept(this, argu);
            if(current_variables.contains(id))
                return (R) id;
            String new_variable = new_var();
            ptm(new_variable + " = " + wanted_variable + "." + id + ";");
            String type;
            if(id.equals("runner"))
            	type = "Runner";
            else {
                //System.out.println(classInfo);
            	type = classInfo.type(id);
            }
            addVariable(new_variable, type);
            return (R) new_variable;
        }
        return n.f0.accept(this, argu);
    }

    /**
     * f0 -> Identifier()
     * f1 -> "."
     * f2 -> Identifier()
     */
    public R visit(DotExpression n, A argu) {
        R _ret=null;
        String id = (String) n.f0.accept(this, argu);
        if(!current_variables.contains(id)) {
            String new_variable = new_var();
            ptm(new_variable + " = " + wanted_variable + "." + id + ";");
            addVariable(new_variable, classInfo.type(id));
            id = new_variable;
        }
        String id2 = (String) n.f2.accept(this, argu);
        id = id + "." + id2;
        return (R) id;
    }

}
