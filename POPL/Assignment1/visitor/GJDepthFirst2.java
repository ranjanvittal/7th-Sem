//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst2<R,A> extends GJDepthFirst<R, A> {
    String overall;
    String className;
    String extraClasses = "class " + "extra_array" + " { int[] first;}\n";
    int classCount;
    boolean inWhile;
    String condition;
    Hashtable<String, String> currentVariables;
    String expressionType;
    String methodString = "";
    String variableString = "";
    int variableCount = 0;
    R _ret = (R) "";

    public String getVariable(String variable) {
        if(currentVariables.containsKey(variable)) {
            return currentVariables.get(variable);
        }
        return currentClassInfo.getVariable(variable);
    }

    public void makeClass(String type) {
        extraClasses += "class " + "extra_" + type + " { " + type + " first;}\n";
    }

    public void writeToOverall(String a) {
        overall += a;
    }

    public void writeToMethod(String a) {
        methodString += a;
    }

    public String newVariable() {
        variableCount++;
        return "variable" + variableCount;
    }

    public String addVariable(String type) {
        String variable = newVariable();
        variableString += type + " " + variable + ";\n";
        return variable;
    }

    public String newParameter(String type) {
        if(type.equals("int[]"))
            return addVariable("extra_array");
        return addVariable("extra_" + type);
    }

    //
    // Auto class visitors--probably don't need to be overridden.
    //
    public R visit(NodeList n, A argu) {
        int _count = 0;
        String ret = "";
        for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            ret = ret + e.nextElement().accept(this,argu);
        }
        return (R) ret;
    }

    public R visit(NodeListOptional n, A argu) {
        String ret = "";
        if ( n.present() ) {
            int _count = 0;
            for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
                ret += (String) e.nextElement().accept(this,argu);
                _count++;
            }
            return (R) ret;
        }
        else
            return (R) ret;
    }

    public R visit(NodeOptional n, A argu) {
        if ( n.present() )
            return n.node.accept(this,argu);
        else
            return _ret;
    }

    public R visit(NodeSequence n, A argu) {
        int _count = 0;
        String ret = "";
        for ( Enumeration<Node> e  =  n.elements(); e.hasMoreElements(); ) {
            ret = ret + (String) e.nextElement().accept(this,argu);
            _count++;
        }
        return (R) ret;
    }

    public R visit(NodeToken n, A argu) { return (R) n.toString(); }

    //
    // User-generated visitor methods below
    //

    /**
     * f0 -> MainClass()
     * f1 -> ( TypeDeclaration() )*
     * f2 -> <EOF>
     */
    public R visit(Goal n, A argu) {
        classInfos = (Hashtable<String, ClassInfo>) argu;
        overall = "";
        n.f0.accept(this, argu);
        makeClass("int");
        makeClass("boolean");
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        writeToOverall(extraClasses);
        System.out.println(overall);
        return _ret;
    }

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "{"
     * f3 -> "public"
     * f4 -> "static"
     * f5 -> "void"
     * f6 -> "main"
     * f7 -> "("
     * f8 -> "String"
     * f9 -> "["
     * f10 -> "]"
     * f11 -> Identifier()
     * f12 -> ")"
     * f13 -> "{"
     * f14 -> PrintStatement()
     * f15 -> "}"
     * f16 -> "}"
     */
    public R visit(MainClass n, A argu) {
        String f0 = (String) n.f0.accept(this, argu);
        String f1 = n.f1.f0.tokenImage;
        String f2 = (String) n.f2.accept(this, argu);
        String f3 = (String) n.f3.accept(this, argu);
        String f4 = (String) n.f4.accept(this, argu);
        String f5 = (String) n.f5.accept(this, argu);
        String f6 = (String) n.f6.accept(this, argu);
        String f7 = (String) n.f7.accept(this, argu);
        String f8 = (String) n.f8.accept(this, argu);
        String f9 = (String) n.f9.accept(this, argu);
        String f10 = (String) n.f10.accept(this, argu);
        String f11 = (String) n.f11.accept(this, argu);
        String f12 = (String) n.f12.accept(this, argu);
        String f13 = (String) n.f13.accept(this, argu);
        String f15 = (String) n.f15.accept(this, argu);
        String f16 = (String) n.f16.accept(this, argu);
        writeToOverall(
            f0 + " " + f1 + " " + f2 + " " + f3 + " " +
            f4 + " " + f5 + " " + f6 + " " + f7 + " " +
            f8 + f9 + f10 + " " + f11 + f12 + " " + f13 + "\n" +
            "new new_" + f1 + "().print();\n" + f15 + "\n" + f16 + "\n"
        );

        writeToOverall(
            "class new_" + f1 + " {\npublic void print() " + "{\n"
        );
        methodString = "";
        variableString = "";
        n.f14.accept(this, argu);
        writeToOverall(variableString + methodString);
        writeToOverall("}\n}\n");
        return _ret;
    }

    /**
     * f0 -> ClassDeclaration()
     *         | ClassExtendsDeclaration()
     */
    public R visit(TypeDeclaration n, A argu) {
        inClass = true;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "{"
     * f3 -> ( VarDeclaration() )*
     * f4 -> ( MethodDeclaration() )*
     * f5 -> "}"
     */
    public R visit(ClassDeclaration n, A argu) {
        String f0 = (String) n.f0.accept(this, argu);
        className = (String) n.f1.accept(this, argu);
        makeClass(className);
        currentClassInfo = classInfos.get(className);
        String f2 = (String) n.f2.accept(this, argu);
        String f3 = (String) n.f3.accept(this, argu);
        writeToOverall(f0 + " " + className + " " + f2  + "\n" + f3);
        n.f4.accept(this, argu);
        String f5 = (String) n.f5.accept(this, argu);
        writeToOverall(f5 + "\n");
        return _ret;
    }

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "extends"
     * f3 -> Identifier()
     * f4 -> "{"
     * f5 -> ( VarDeclaration() )*
     * f6 -> ( MethodDeclaration() )*
     * f7 -> "}"
     */
    public R visit(ClassExtendsDeclaration n, A argu) {
        String f0 = (String) n.f0.accept(this, argu);
        className = (String) n.f1.accept(this, argu);
        makeClass(className);
        String f2 = (String) n.f2.accept(this, argu);
        String f3 = (String) n.f3.accept(this, argu);
        currentClassInfo = classInfos.get(className);
        String f4 = (String) n.f4.accept(this, argu);
        String f5 = (String) n.f5.accept(this, argu);
        writeToOverall(
            f0 + " " + className + " " + f2 + " " + f3 +
            " " + f4 + "\n" + f5
        );
        n.f6.accept(this, argu);
        String f7 = (String) n.f7.accept(this, argu);
        writeToOverall(f7 + "\n");
        return _ret;
    }

    /**
     * f0 -> Type()
     * f1 -> Identifier()
     * f2 -> ";"
     */
    public R visit(VarDeclaration n, A argu) {
        String f0 = (String) n.f0.accept(this, argu);
        String f1 = (String) n.f1.accept(this, argu);
        String f2 = (String) n.f2.accept(this, argu);
        if(!inClass) {
            currentVariables.put(f1, f0);
            variableString += f0 + " " + f1 + f2 + "\n";
            return _ret;
        }
        else
            return (R) (f0 + " " + f1 + f2 + "\n");
    }

    /**
     * f0 -> "public"
     * f1 -> Type()
     * f2 -> Identifier()
     * f3 -> "("
     * f4 -> ( FormalParameterList() )?
     * f5 -> ")"
     * f6 -> "{"
     * f7 -> ( VarDeclaration() )*
     * f8 -> ( Statement() )*
     * f9 -> "return"
     * f10 -> Expression()
     * f11 -> ";"
     * f12 -> "}"
     */
    public R visit(MethodDeclaration n, A argu) {
        inClass = false;
        currentVariables = new Hashtable<String, String>();
        String f0 = (String) n.f0.accept(this, argu);
        String type = (String) n.f1.accept(this, argu);
        String extra;
        if(type.equals("int[]"))
            extra = "extra_array";
        else
            extra = "extra_" + type;

        String method = (String) n.f2.accept(this, argu);
        currentClassInfo.putMethod(method, type);
        variableString = "";
        methodString = "";
        String f3 = (String) n.f3.accept(this, argu);
        String f4 = (String) n.f4.accept(this, argu);
        if(f4 == "")
            f4 = extra + " return_value";
        else
            f4 += ", " + extra + " return_value";
        String f5 = (String) n.f5.accept(this, argu);
        String f6 = (String) n.f6.accept(this, argu);
        writeToOverall(
            f0 + " void " + method + f3 +
            f4 + f5 + " " + f6 + "\n"
        );

        String f7 = (String) n.f7.accept(this, argu);
        String f8 = (String) n.f8.accept(this, argu);
        String f10 = (String) n.f10.accept(this, argu);
        writeToMethod("return_value.first = " + f10 + ";\n");
        String f12 = (String) n.f12.accept(this, argu);
        writeToOverall(variableString + methodString + f12 + "\n");
        return _ret;
    }

    /**
     * f0 -> FormalParameter()
     * f1 -> ( FormalParameterRest() )*
     */
    public R visit(FormalParameterList n, A argu) {
        String ret = (String) n.f0.accept(this, argu);
        ret += (String) n.f1.accept(this, argu);
        return (R) ret;
    }

    /**
     * f0 -> Type()
     * f1 -> Identifier()
     */
    public R visit(FormalParameter n, A argu) {
        String f0 = (String) n.f0.accept(this, argu);
        String f1 = (String) n.f1.accept(this, argu);
        currentVariables.put(f1, f0);
        String f2 = newVariable();
        variableString += f0 + " " + f1 + ";\n";
        methodString += f1 + " = " + f2 + ";\n";
        return (R) (f0 + " " + f2);
    }

    /**
     * f0 -> ","
     * f1 -> FormalParameter()
     */
    public R visit(FormalParameterRest n, A argu) {
        String f0 = (String) n.f0.accept(this, argu);
        String f1 = (String) n.f1.accept(this, argu);
        return (R) (f0 + " " + f1);
    }

    /**
     * f0 -> ArrayType()
     *         | BooleanType()
     *         | IntegerType()
     *         | Identifier()
     */
    public R visit(Type n, A argu) {
        return n.f0.accept(this, argu);
    }

    /**
     * f0 -> "int"
     * f1 -> "["
     * f2 -> "]"
     */
    public R visit(ArrayType n, A argu) {
        String ret = "int[]";
        return (R) ret;
    }

    /**
     * f0 -> "boolean"
     */
    public R visit(BooleanType n, A argu) {
        return n.f0.accept(this, argu);
    }

    /**
     * f0 -> "int"
     */
    public R visit(IntegerType n, A argu) {
        return n.f0.accept(this, argu);
    }

    /**
     * f0 -> Block()
     *         | AssignmentStatement()
     *         | ArrayAssignmentStatement()
     *         | IfStatement()
     *         | WhileStatement()
     *         | PrintStatement()
     */
    public R visit(Statement n, A argu) {
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "{"
     * f1 -> ( Statement() )*
     * f2 -> "}"
     */
    public R visit(Block n, A argu) {
        String f0 = (String) n.f0.accept(this, argu);
        writeToMethod(f0 + "\n");
        n.f1.accept(this, argu);
        String f2 =(String) n.f2.accept(this, argu);
        writeToMethod(f2 + "\n");
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> " = "
     * f2 -> Expression()
     * f3 -> ";"
     */
    public R visit(AssignmentStatement n, A argu) {
        String f0 = (String) n.f0.accept(this, argu);
        String f1 = (String) n.f1.accept(this, argu);
        String f2 = (String) n.f2.accept(this, argu);
        String f3 = (String) n.f3.accept(this, argu);
        writeToMethod(f0 + " " + f1 + " " + f2 + ";\n");
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "["
     * f2 -> Expression()
     * f3 -> "]"
     * f4 -> " = "
     * f5 -> Expression()
     * f6 -> ";"
     */
    public R visit(ArrayAssignmentStatement n, A argu) {
        String f0 = (String) n.f0.accept(this, argu);
        String f1 = (String) n.f1.accept(this, argu);
        String f2 = (String) n.f2.accept(this, argu);
        String f3 = (String) n.f3.accept(this, argu);
        String f4 = (String) n.f4.accept(this, argu);
        String f5 = (String) n.f5.accept(this, argu);
        String f6 = (String) n.f6.accept(this, argu);
        writeToMethod(f0 + f1 + f2 + f3 + " " + f4 + " " + f5 + f6 + "\n");
        return _ret;
    }

    /**
     * f0 -> "if"
     * f1 -> "("
     * f2 -> Expression()
     * f3 -> ")"
     * f4 -> Statement()
     * f5 -> "else"
     * f6 -> Statement()
     */
    public R visit(IfStatement n, A argu) {
        String f0 = (String) n.f0.accept(this, argu);
        String f1 = (String) n.f1.accept(this, argu);
        String f2 = (String) n.f2.accept(this, argu);
        String f3 = (String) n.f3.accept(this, argu);
        writeToMethod(f0 + f1 + f2 + f3 + "{\n");
        n.f4.accept(this, argu);
        writeToMethod("}\n");
        String f5 = (String) n.f5.accept(this, argu);
        writeToMethod(f5 + " {\n");
        n.f6.accept(this, argu);
        writeToMethod("}\n");
        return _ret;
    }

    /**
     * f0 -> "while"
     * f1 -> "("
     * f2 -> Expression()
     * f3 -> ")"
     * f4 -> Statement()
     */
    public R visit(WhileStatement n, A argu) {
        String f0 = (String) n.f0.accept(this, argu);
        String f1 = (String) n.f1.accept(this, argu);
        inWhile = true;
        condition = "";
        String f2 = (String) n.f2.accept(this, argu);
        String currentCondition = condition;
        inWhile = false;
        String f3 = (String) n.f3.accept(this, argu);
        writeToMethod(f0 + f1 + f2 + f3 + "{\n");
        n.f4.accept(this, argu);
        writeToMethod(currentCondition + "}\n");
        return _ret;
    }

    /**
     * f0 -> "System.out.println"
     * f1 -> "("
     * f2 -> Expression()
     * f3 -> ")"
     * f4 -> ";"
     */
    public R visit(PrintStatement n, A argu) {
        String f0 = (String) n.f0.accept(this, argu);
        String f1 = (String) n.f1.accept(this, argu);
        String f2 = (String) n.f2.accept(this, argu);
        String f3 = (String) n.f3.accept(this, argu);
        String f4 = (String) n.f4.accept(this, argu);
        writeToMethod(f0 + f1 + f2 + f3 + f4 + "\n");
        return _ret;
    }

    /**
     * f0 -> AndExpression()
     *         | CompareExpression()
     *         | PlusExpression()
     *         | MinusExpression()
     *         | TimesExpression()
     *         | ArrayLookup()
     *         | ArrayLength()
     *         | MessageSend()
     *         | PrimaryExpression()
     */
    public R visit(Expression n, A argu) {
        return n.f0.accept(this, argu);
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "&"
     * f2 -> PrimaryExpression()
     */
    public R visit(AndExpression n, A argu) {
        String left = (String) n.f0.accept(this, argu);
        String op = (String) n.f1.accept(this, argu);
        String right = (String) n.f2.accept(this, argu);
        expressionType = "boolean";
        return (R) (left + op + right);
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "<"
     * f2 -> PrimaryExpression()
     */
    public R visit(CompareExpression n, A argu) {
        String left = (String) n.f0.accept(this, argu);
        String op = (String) n.f1.accept(this, argu);
        String right = (String) n.f2.accept(this, argu);
        expressionType = "boolean";
        return (R) (left + op + right);
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "+"
     * f2 -> PrimaryExpression()
     */
    public R visit(PlusExpression n, A argu) {
        String left = (String) n.f0.accept(this, argu);
        String op = (String) n.f1.accept(this, argu);
        String right = (String) n.f2.accept(this, argu);
        expressionType = "int";
        return (R) (left + op + right);
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "-"
     * f2 -> PrimaryExpression()
     */
    public R visit(MinusExpression n, A argu) {
        String left = (String) n.f0.accept(this, argu);
        String op = (String) n.f1.accept(this, argu);
        String right = (String) n.f2.accept(this, argu);
        expressionType = "int";
        return (R) (left + op + right);
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "*"
     * f2 -> PrimaryExpression()
     */
    public R visit(TimesExpression n, A argu) {
        String left = (String) n.f0.accept(this, argu);
        String op = (String) n.f1.accept(this, argu);
        String right = (String) n.f2.accept(this, argu);
        expressionType = "int";
        return (R) (left + op + right);
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "["
     * f2 -> PrimaryExpression()
     * f3 -> "]"
     */
    public R visit(ArrayLookup n, A argu) {
        String f0 = (String) n.f0.accept(this, argu);
        String f1 = (String) n.f1.accept(this, argu);
        String f2 = (String) n.f2.accept(this, argu);
        String f3 = (String) n.f3.accept(this, argu);
        expressionType = "int";
        return (R) (f0 + f1 + f2 + f3);
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "."
     * f2 -> "length"
     */
    public R visit(ArrayLength n, A argu) {
        String f0 = (String) n.f0.accept(this, argu);
        String var = addVariable("int[]");
        String assignment = var + " = " + f0 + ";\n";
        writeToMethod(assignment);
        if(inWhile)
            condition += assignment;
        String f1 = (String) n.f1.accept(this, argu);
        String f2 = (String) n.f2.accept(this, argu);
        expressionType = "int";
        return (R) (var + f1 + f2);
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "."
     * f2 -> Identifier()
     * f3 -> "("
     * f4 -> ( ExpressionList() )?
     * f5 -> ")"
     */
    public R visit(MessageSend n, A argu) {
        String f0 = (String) n.f0.accept(this, argu);
        String var = addVariable(expressionType);
        String assignment = var + " = " + f0 + ";\n";
        writeToMethod(assignment);
        if(inWhile)
            condition += assignment;
        String f1 = (String) n.f1.accept(this, argu);
        String f2 = (String) n.f2.accept(this, argu);
        String type = classInfos.get(expressionType).getMethod(f2);

        String f3 = (String) n.f3.accept(this, argu);
        String f4 = (String) n.f4.accept(this, argu);
        String extraParam = newParameter(type);
        if(n.f4.present())
            f4 += ", " + extraParam;
        else
            f4 = extraParam;
        String f5 = (String) n.f5.accept(this, argu);
        expressionType = type;
        String extra;
        if(type.equals("int[]"))
            extra = "extra_array";
        else
            extra = "extra_" + type;
        String var2 = addVariable(type);
        String pre_assignment = extraParam + " = new " + extra + "();\n";
        String post_assignment = var2 + " = " + extraParam + ".first;\n";
        String to_be_written = (
            pre_assignment +
            var + f1 + f2 + f3 + f4 + f5 + ";\n" +
            post_assignment
        );
        writeToMethod(to_be_written);
        if(inWhile)
            condition += to_be_written;
        return (R) var2;
    }

    /**
     * f0 -> Expression()
     * f1 -> ( ExpressionRest() )*
     */
    public R visit(ExpressionList n, A argu) {
        String f0 = (String) n.f0.accept(this, argu);
        String f1 = (String) n.f1.accept(this, argu);
        return (R) (f0 + f1);
    }

    /**
     * f0 -> ","
     * f1 -> Expression()
     */
    public R visit(ExpressionRest n, A argu) {
        String f0 = (String) n.f0.accept(this, argu);
        String f1 = (String) n.f1.accept(this, argu);
        return (R) (f0 + "  " + f1);
    }

    /**
     * f0 -> IntegerLiteral()
     *         | TrueLiteral()
     *         | FalseLiteral()
     *         | Identifier()
     *         | ThisExpression()
     *         | ArrayAllocationExpression()
     *         | AllocationExpression()
     *         | NotExpression()
     *         | BracketExpression()
     */
    public R visit(PrimaryExpression n, A argu) {
        if(n.f0.which == 3) {
            String id = (String) n.f0.accept(this, argu);
            expressionType = getVariable(id);
            return (R) id;
        }
        return n.f0.accept(this, argu);
    }

    /**
     * f0 -> <INTEGER_LITERAL>
     */
    public R visit(IntegerLiteral n, A argu) {
        expressionType = "int";
        return n.f0.accept(this, argu);
    }

    /**
     * f0 -> "true"
     */
    public R visit(TrueLiteral n, A argu) {
        expressionType = "boolean";
        return n.f0.accept(this, argu);
    }

    /**
     * f0 -> "false"
     */
    public R visit(FalseLiteral n, A argu) {
        expressionType = "boolean";
        return n.f0.accept(this, argu);
    }

    /**
     * f0 -> <IDENTIFIER>
     */
    public R visit(Identifier n, A argu) {
        String ret = "micro_" + (String) n.f0.accept(this, argu);
        return (R) ret;
    }

    /**
     * f0 -> "this"
     */
    public R visit(ThisExpression n, A argu) {
        String f0 = (String) n.f0.accept(this, argu);
        expressionType = className;
        return (R) f0;
    }

    /**
     * f0 -> "new"
     * f1 -> "int"
     * f2 -> "["
     * f3 -> Expression()
     * f4 -> "]"
     */
    public R visit(ArrayAllocationExpression n, A argu) {
        String f0 = (String) n.f0.accept(this, argu);
        String f1 = (String) n.f1.accept(this, argu);
        String f2 = (String) n.f2.accept(this, argu);
        String f3 = (String) n.f3.accept(this, argu);
        String f4 = (String) n.f4.accept(this, argu);
        expressionType = "int[]";
        return (R) (f0 + " " + f1 + f2 + f3 + f4);
    }

    /**
     * f0 -> "new"
     * f1 -> Identifier()
     * f2 -> "("
     * f3 -> ")"
     */
    public R visit(AllocationExpression n, A argu) {
        String f0 = (String) n.f0.accept(this, argu);
        String f1 = (String) n.f1.accept(this, argu);
        String f2 = (String) n.f2.accept(this, argu);
        String f3 = (String) n.f3.accept(this, argu);
        expressionType = f1;
        return (R) (f0 + " " + f1 + f2 + f3);
    }

    /**
     * f0 -> "!"
     * f1 -> Expression()
     */
    public R visit(NotExpression n, A argu) {
        String f0 = (String) n.f0.accept(this, argu);
        String f1 = (String) n.f1.accept(this, argu);
        expressionType = "boolean";
        return (R) (f0 + f1);
    }

    /**
     * f0 -> "("
     * f1 -> Expression()
     * f2 -> ")"
     */
    public R visit(BracketExpression n, A argu) {
        String f0 = (String) n.f0.accept(this, argu);
        String f1 = (String) n.f1.accept(this, argu);
        String f2 = (String) n.f2.accept(this, argu);
        return (R) (f0 + f1 + f2);
    }

}
