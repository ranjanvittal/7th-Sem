//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst2<R,A> extends GJDepthFirst<R,A> {
    //
    // Auto class visitors--probably don't need to be overridden.
    //
    boolean inMethod;
    String currentType;
    Environment environment;

    class Environment {

        Hashtable<String, String> currentVariables;
        Hashtable<String, Value> methodVariables;

        public Environment() {
            currentVariables = new Hashtable<String, String>();
            methodVariables = new Hashtable<String, Value>();
        }

        public void add(String variable, String type) {
            currentVariables.put(variable, type);
        }
        public void assign(String variable, Value value) {
            if(currentVariables.containsKey(variable)) {
                methodVariables.put(variable, value);
            }
            else {
                String type = currentVariables.get("this");
                methodVariables.get("this").assign(variable, value, type);
            }
        }

        public Value get(String variable) {
            if(methodVariables.containsKey(variable))
                return methodVariables.get(variable);
            String type = currentVariables.get("this");
            return methodVariables.get("this").get(variable, type);
        }

        public String getType(String variable) {
            if(currentVariables.containsKey(variable))
                return currentVariables.get(variable);
            String type = currentVariables.get("this");
            return methodVariables.get("this").getType(variable, type);
        }

    }
    public R visit(NodeList n, A argu) {
        R _ret = null;
        int _count=0;
        for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
        }
        return _ret;
    }

    public R visit(NodeListOptional n, A argu) {
        if ( n.present() ) {
            R _ret=null;
            int _count=0;
            for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
                e.nextElement().accept(this,argu);
                _count++;
            }
            return _ret;
        }
        else
            return null;
    }

    public R visit(NodeOptional n, A argu) {
        if ( n.present() )
            return n.node.accept(this,argu);
        else
            return null;
    }

    public R visit(NodeSequence n, A argu) {
        R _ret=null;
        int _count=0;
        for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
        }
        return _ret;
    }

    public R visit(NodeToken n, A argu) { return (R) n.toString(); }



    //
    // User-generated visitor methods below
    //

    /**
     * f0 -> MainClass()
     * f1 -> ( TypeDeclaration() )*
     * f2 -> <EOF>
     */
    public R visit(Goal n, A argu) {
        R _ret=null;
        globalClassInfo = (Hashtable<String, ClassInfo>) argu;
        n.f0.accept(this, argu);
        //n.f1.accept(this, argu);
        //n.f2.accept(this, argu);
        return (R) globalClassInfo;
    }

    public Vector<Value> getExpressionList(NodeOptional n, A argu) {
        Vector<Value> values = new Vector<Value>();
        if(n.present()) {
            ExpressionList el = (ExpressionList) n.node;
            values.add((Value)el.f0.accept(this, argu));
            NodeListOptional nlo = el.f1;
            for(Enumeration<Node> e = nlo.elements(); e.hasMoreElements(); ) {
                ExpressionRest er = (ExpressionRest) e.nextElement();
                values.add((Value) er.f1.accept(this, argu));
            }
        }
        return values;
    }

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "{"
     * f3 -> "public"
     * f4 -> "static"
     * f5 -> "void"
     * f6 -> "main"
     * f7 -> "("
     * f8 -> "String"
     * f9 -> "["
     * f10 -> "]"
     * f11 -> Identifier()
     * f12 -> ")"
     * f13 -> "{"
     * f14 -> "new"
     * f15 -> Identifier()
     * f16 -> "("
     * f17 -> ")"
     * f18 -> "."
     * f19 -> Identifier()
     * f20 -> "("
     * f21 -> ( ExpressionList() )?
     * f22 -> ")"
     * f23 -> ";"
     * f24 -> "}"
     * f25 -> "}"
     */
    public R visit(MainClass n, A argu) {
        R _ret=null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        n.f6.accept(this, argu);
        n.f7.accept(this, argu);
        n.f8.accept(this, argu);
        n.f9.accept(this, argu);
        n.f10.accept(this, argu);
        n.f11.accept(this, argu);
        n.f12.accept(this, argu);
        n.f13.accept(this, argu);
        n.f14.accept(this, argu);
        String className = (String) n.f15.accept(this, argu);

        ClassObject classObject = globalClassInfo.get(className).makeClass();
        Value v = new Value();
        v._object = classObject;
        n.f16.accept(this, argu);
        n.f17.accept(this, argu);
        n.f18.accept(this, argu);
        String method = (String) n.f19.accept(this, argu);
        MethodType mt = v.getMethod(method);
        currentType = mt.type;
        MethodDeclaration md = mt.md;
        n.f20.accept(this, argu);
        Vector<Value> values = getExpressionList(n.f21, argu);
        values.add(v);
        md.accept(this, (A) values);
        return _ret;
    }

    /**
     * f0 -> ClassDeclaration()
     *         | ClassExtendsDeclaration()
     */
    public R visit(TypeDeclaration n, A argu) {
        R _ret=null;
        // n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "{"
     * f3 -> ( VarDeclaration() )*
     * f4 -> ( MethodDeclaration() )*
     * f5 -> "}"
     */
    public R visit(ClassDeclaration n, A argu) {
        R _ret=null;
        // n.f0.accept(this, argu);
        // n.f1.accept(this, argu);
        // n.f2.accept(this, argu);
        // n.f3.accept(this, argu);
        // n.f4.accept(this, argu);
        // n.f5.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "extends"
     * f3 -> Identifier()
     * f4 -> "{"
     * f5 -> ( VarDeclaration() )*
     * f6 -> ( MethodDeclaration() )*
     * f7 -> "}"
     */
    public R visit(ClassExtendsDeclaration n, A argu) {
        R _ret=null;
        // n.f0.accept(this, argu);
        // n.f1.accept(this, argu);
        // n.f2.accept(this, argu);
        // n.f3.accept(this, argu);
        // n.f4.accept(this, argu);
        // n.f5.accept(this, argu);
        // n.f6.accept(this, argu);
        // n.f7.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Type()
     * f1 -> Identifier()
     * f2 -> ";"
     */
    public R visit(VarDeclaration n, A argu) {
        R _ret=null;
        String type = (String) n.f0.accept(this, argu);
        String id = (String) n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        environment.add(id, type);
        return _ret;
    }

    public void matchParameter(
        NodeOptional n, Vector<Value> values,
        Environment environment, A argu
    ) {
        if(n.present()) {
            FormalParameterList f = (FormalParameterList) n.node;
            FormalParameter f1 = f.f0;
            String type = (String) f1.f0.accept(this, argu);
            String id = (String) f1.f1.accept(this, argu);
            Value value = values.elementAt(0);
            environment.add(id, type);
            environment.assign(id, value);
            NodeListOptional f_ = f.f1;
            int i = 1;
            for(Enumeration<Node> e = f_.elements(); e.hasMoreElements();) {
                FormalParameterRest f2 = (FormalParameterRest) e.nextElement();
                type = (String) f2.f1.f0.accept(this, argu);
                id = (String) f2.f1.f1.accept(this, argu);
                value = values.elementAt(i);
                environment.add(id, type);
                environment.assign(id, value);
                i++;
            }

        }
    }
    /**
     * f0 -> "public"
     * f1 -> "void"
     * f2 -> Identifier()
     * f3 -> "("
     * f4 -> ( FormalParameterList() )?
     * f5 -> ")"
     * f6 -> "{"
     * f7 -> ( VarDeclaration() )*
     * f8 -> ( Statement() )*
     * f9 -> "}"
     */
    public R visit(MethodDeclaration n, A argu) {
        R _ret=null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        environment = new Environment();
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        Vector<Value> values = (Vector<Value>) argu;
        matchParameter(n.f4, values, environment, argu);
        environment.add(
            "this", currentType
        );
        environment.assign(
            "this", values.elementAt(values.size()-1)
        );
        n.f5.accept(this, argu);
        n.f6.accept(this, argu);
        n.f7.accept(this, argu);
        n.f8.accept(this, argu);
        n.f9.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> FormalParameter()
     * f1 -> ( FormalParameterRest() )*
     */
    public R visit(FormalParameterList n, A argu) {
        R _ret=null;
        // n.f0.accept(this, argu);
        // n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Type()
     * f1 -> Identifier()
     */
    public R visit(FormalParameter n, A argu) {
        R _ret=null;
        // n.f0.accept(this, argu);
        // n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> ","
     * f1 -> FormalParameter()
     */
    public R visit(FormalParameterRest n, A argu) {
        R _ret=null;
        // n.f0.accept(this, argu);
        // n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> ArrayType()
     *         | BooleanType()
     *         | IntegerType()
     *         | Identifier()
     */
    public R visit(Type n, A argu) {
        return n.f0.accept(this, argu);
    }

    /**
     * f0 -> "int"
     * f1 -> "["
     * f2 -> "]"
     */
    public R visit(ArrayType n, A argu) {
        String r = "int[]";
        return (R) r;
    }

    /**
     * f0 -> "boolean"
     */
    public R visit(BooleanType n, A argu) {
        String r = "boolean";
        return (R) r;
    }

    /**
     * f0 -> "int"
     */
    public R visit(IntegerType n, A argu) {
        String r = "int";
        return (R) r;
    }

    /**
     * f0 -> Block()
     *         | AssignmentStatement()
     *         | ArrayAssignmentStatement()
     *         | IfStatement()
     *         | WhileStatement()
     *         | PrintStatement()
     *         | MessageSendStatement()
     */
    public R visit(Statement n, A argu) {
        R _ret=null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "{"
     * f1 -> ( Statement() )*
     * f2 -> "}"
     */
    public R visit(Block n, A argu) {
        R _ret=null;
        n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> VarRef()
     * f1 -> "="
     * f2 -> Expression()
     * f3 -> ";"
     */
    public R visit(AssignmentStatement n, A argu) {
        R _ret = null;
        Value value = (Value) n.f2.accept(this, argu);
        if(n.f0.f0.which == 1) {
            String id = (String) n.f0.f0.accept(this, argu);
            environment.assign(id, value);
        }
        else {
            DotExpression de = (DotExpression) n.f0.f0.choice;
            String id = (String) de.f0.accept(this, argu);
            Value v = environment.get(id);
            String type = environment.getType(id);
            String field = (String) de.f2.accept(this, argu);
            v.assign(field, value, type);
        }

        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "["
     * f2 -> Expression()
     * f3 -> "]"
     * f4 -> "="
     * f5 -> Expression()
     * f6 -> ";"
     */
    public R visit(ArrayAssignmentStatement n, A argu) {
        R _ret = null;
        String id = (String) n.f0.accept(this, argu);
        Value v = environment.get(id);
        Value v2 = (Value) n.f5.accept(this, argu);
        Value v1 = (Value) n.f2.accept(this, argu);
        v._array.set(v1._int, v2._int);
        return _ret;
    }

    /**
     * f0 -> "if"
     * f1 -> "("
     * f2 -> Expression()
     * f3 -> ")"
     * f4 -> Statement()
     * f5 -> "else"
     * f6 -> Statement()
     */
    public R visit(IfStatement n, A argu) {
        R _ret = null;
        if(((Value)n.f2.accept(this, argu))._bool) {
            n.f4.accept(this, argu);
        }
        else {
            n.f6.accept(this, argu);
        }
        return _ret;
    }

    /**
     * f0 -> "while"
     * f1 -> "("
     * f2 -> Expression()
     * f3 -> ")"
     * f4 -> Statement()
     */
    public R visit(WhileStatement n, A argu) {
        R _ret = null;
        while(((Value) n.f2.accept(this, argu) )._bool) {
            n.f4.accept(this, argu);
        }
        return _ret;
    }

    /**
     * f0 -> "System.out.println"
     * f1 -> "("
     * f2 -> Expression()
     * f3 -> ")"
     * f4 -> ";"
     */
    public R visit(PrintStatement n, A argu) {
        R _ret = null;
        Value v = (Value) n.f2.accept(this, argu);
        System.out.println(v._int);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "."
     * f2 -> Identifier()
     * f3 -> "("
     * f4 -> ( ExpressionList() )?
     * f5 -> ")"
     * f6 -> ";"
     */
    public R visit(MessageSendStatement n, A argu) {
        R _ret = null;
        String id = (String) n.f0.accept(this, argu);
        String method = (String) n.f2.accept(this, argu);
        Value v = environment.get(id);
        MethodType mt = v.getMethod(method);
        Vector<Value> values = getExpressionList(n.f4, argu);
        currentType = mt.type;
        MethodDeclaration md = mt.md;
        values.add(v);
        Environment storedEnvironment = environment;
        md.accept(this, (A) values);
        environment = storedEnvironment;
        return _ret;
    }

    /**
     * f0 -> AndExpression()
     *         | CompareExpression()
     *         | PlusExpression()
     *         | MinusExpression()
     *         | TimesExpression()
     *         | ArrayLookup()
     *         | PrimaryExpression()
     */
    public R visit(Expression n, A argu) {
        return n.f0.accept(this, argu);
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "&"
     * f2 -> PrimaryExpression()
     */
    public R visit(AndExpression n, A argu) {
        Value v1 = (Value) n.f0.accept(this, argu);
        Value v2 = (Value) n.f2.accept(this, argu);
        Value v = new Value();
        v._bool = v1._bool&v2._bool;
        return (R) v;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "<"
     * f2 -> PrimaryExpression()
     */
    public R visit(CompareExpression n, A argu) {
        Value v1 = (Value) n.f0.accept(this, argu);
        Value v2 = (Value) n.f2.accept(this, argu);
        Value v = new Value();
        v._bool = v1._int<v2._int;
        return (R) v;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "+"
     * f2 -> PrimaryExpression()
     */
    public R visit(PlusExpression n, A argu) {
        Value v1 = (Value) n.f0.accept(this, argu);
        Value v2 = (Value) n.f2.accept(this, argu);
        Value v = new Value();
        v._int = v1._int+v2._int;
        return (R) v;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "-"
     * f2 -> PrimaryExpression()
     */
    public R visit(MinusExpression n, A argu) {
        Value v1 = (Value) n.f0.accept(this, argu);
        Value v2 = (Value) n.f2.accept(this, argu);
        Value v = new Value();
        v._int = v1._int-v2._int;
        return (R) v;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "*"
     * f2 -> PrimaryExpression()
     */
    public R visit(TimesExpression n, A argu) {
        Value v1 = (Value) n.f0.accept(this, argu);
        Value v2 = (Value) n.f2.accept(this, argu);
        Value v = new Value();
        v._int = v1._int*v2._int;
        return (R) v;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "["
     * f2 -> PrimaryExpression()
     * f3 -> "]"
     */
    public R visit(ArrayLookup n, A argu) {
        Value v1 = (Value) n.f0.accept(this, argu);
        Value v2 = (Value) n.f2.accept(this, argu);
        Value v3 = new Value();
        v3._int = v1._array.elementAt(v2._int);
        return (R) v3;
    }

    /**
     * f0 -> Expression()
     * f1 -> ( ExpressionRest() )*
     */
    public R visit(ExpressionList n, A argu) {
        R _ret = null;
        // n.f0.accept(this, argu);
        // n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> ","
     * f1 -> Expression()
     */
    public R visit(ExpressionRest n, A argu) {
        R _ret = null;
        // n.f0.accept(this, argu);
        // n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> IntegerLiteral()
     *         | TrueLiteral()
     *         | FalseLiteral()
     *         | VarRef()
     *         | ThisExpression()
     *         | ArrayAllocationExpression()
     *         | AllocationExpression()
     *         | NotExpression()
     *         | BracketExpression()
     */
    public R visit(PrimaryExpression n, A argu) {
        return n.f0.accept(this, argu);
    }

    /**
     * f0 -> <INTEGER_LITERAL>
     */
    public R visit(IntegerLiteral n, A argu) {
        Value v = new Value();
        v._int = Integer.parseInt((String) n.f0.accept(this, argu));
        return (R) v;
    }

    /**
     * f0 -> "true"
     */
    public R visit(TrueLiteral n, A argu) {
        Value v = new Value();
        v._bool = true;
        return (R) v;
    }

    /**
     * f0 -> "false"
     */
    public R visit(FalseLiteral n, A argu) {
        Value v = new Value();
        v._bool = false;
        return (R) v;
    }

    /**
     * f0 -> <IDENTIFIER>
     */
    public R visit(Identifier n, A argu) {
        return n.f0.accept(this, argu);
    }

    /**
     * f0 -> "this"
     */
    public R visit(ThisExpression n, A argu) {
        return (R) environment.get("this");
    }

    /**
     * f0 -> "new"
     * f1 -> "int"
     * f2 -> "["
     * f3 -> Expression()
     * f4 -> "]"
     */
    public R visit(ArrayAllocationExpression n, A argu) {
        Value v = (Value) n.f3.accept(this, argu);
        int size = v._int;
        Vector<Integer> ints = new Vector<Integer>();
        int j;
        for(j = 0; j < size; j++)
            ints.add(0);
        Value value = new Value();
        value._array = ints;
        return (R) value;
    }

    /**
     * f0 -> "new"
     * f1 -> Identifier()
     * f2 -> "("
     * f3 -> ")"
     */
    public R visit(AllocationExpression n, A argu) {
        String type = (String) n.f1.accept(this, argu);
        ClassObject c = globalClassInfo.get(type).makeClass();
        Value v = new Value();
        v._object = c;
        return (R) v;
    }

    /**
     * f0 -> "!"
     * f1 -> Expression()
     */
    public R visit(NotExpression n, A argu) {
        Value v = (Value) n.f1.accept(this, argu);
        Value v1 = new Value();
        v1._bool = !(v._bool);
        return (R) v1;
    }

    /**
     * f0 -> "("
     * f1 -> Expression()
     * f2 -> ")"
     */
    public R visit(BracketExpression n, A argu) {
        return n.f1.accept(this, argu);
    }

    /**
     * f0 -> DotExpression()
     *         | Identifier()
     */
    public R visit(VarRef n, A argu) {
        if(n.f0.which == 1) {
            String id = (String) n.f0.accept(this, argu);
            return (R) environment.get(id);
        }
        return n.f0.accept(this, argu);
    }

    /**
     * f0 -> Identifier()
     * f1 -> "."
     * f2 -> Identifier()
     */
    public R visit(DotExpression n, A argu) {
        String id = (String) n.f0.accept(this, argu);
        String field = (String) n.f2.accept(this, argu);
        String type = (String) environment.getType(id);
        if(field.equals("length") && type.equals("int[]")) {
            Value v = new Value();
            Value v1 = environment.get(id);
            v._int = v1._array.size();
            return (R) v;
        }
        return (R) environment.get(id).get(field, type);
    }

}
