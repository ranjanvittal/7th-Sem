//
// Generated by JTB 1.3.2
//

options {
   JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(InterfaceParser)
import syntaxtree.*;
import java.util.Vector;


public class InterfaceParser 
{
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}


PARSER_END(InterfaceParser)

SKIP :
{
   " "
   | "\t"
   | "\n"
   | "\r"
   | "\f"
}

SPECIAL_TOKEN :
{
   <SINGLE_LINE_COMMENT: "//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")>
   | <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*", "/"] (~["*"])* "*"))* "/">
   | <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*", "/"] (~["*"])* "*"))* "/">
}

TOKEN :
{
   <LPAREN: "(">
   | <RPAREN: ")">
   | <LBRACE: "{">
   | <RBRACE: "}">
   | <SEMICOLON: ";">
   | <LTE: "<=">
   | <QUESTION: "?">
   | <BOOLEAN: "boolean">
   | <INTERFACE: "interface">
   | <INTEGER: "int">
   | <VOID: "void">
}

TOKEN :
{
   <INTEGER_LITERAL: (["1"-"9"] (["0"-"9"])* | "0")>
}

TOKEN :
{
   <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
   | <#LETTER: ["$", "A"-"Z", "_", "a"-"z", "\u00c0"-"\u00d6", "\u00d8"-"\u00f6", "\u00f8"-"\u00ff", "\u0100"-"\u1fff", "\u3040"-"\u318f", "\u3300"-"\u337f", "\u3400"-"\u3d2d", "\u4e00"-"\u9fff", "\uf900"-"\ufaff"]>
   | <#DIGIT: ["0"-"9", "\u0660"-"\u0669", "\u06f0"-"\u06f9", "\u0966"-"\u096f", "\u09e6"-"\u09ef", "\u0a66"-"\u0a6f", "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f", "\u0be7"-"\u0bef", "\u0c66"-"\u0c6f", "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f", "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u1040"-"\u1049"]>
}

Goal Goal() :
{
   NodeListOptional n0 = new NodeListOptional();
   Query n1;
   NodeListOptional n2 = new NodeListOptional();
   InterfaceDeclaration n3;
   NodeToken n4;
   Token n5;

   
}
{
   (
      n1=Query()
      { n0.addNode(n1); }
   )*
   { n0.nodes.trimToSize(); }
   (
      n3=InterfaceDeclaration()
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   n5=<EOF> { 
      n5.beginColumn++; n5.endColumn++;
      n4 = JTBToolkit.makeNodeToken(n5);
   }
   
   { return new Goal(n0,n2,n4); }
}

Query Query() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;
   NodeToken n4;
   Token n5;

   
}
{
   n0=Identifier()
   n2="<=" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Identifier()
   n5="?" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new Query(n0,n1,n3,n4); }
}

InterfaceDeclaration InterfaceDeclaration() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   InterfaceBody n3;

   
}
{
   n1="interface" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   n3=InterfaceBody()
   
   { return new InterfaceDeclaration(n0,n2,n3); }
}

InterfaceBody InterfaceBody() :
{
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   InterfaceMember n3;
   NodeToken n4;
   Token n5;

   
}
{
   n1="{" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=InterfaceMember()
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   n5="}" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new InterfaceBody(n0,n2,n4); }
}

InterfaceMember InterfaceMember() :
{
   ResultType n0;
   Identifier n1;
   NodeToken n2;
   Token n3;
   Type n4;
   Identifier n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;

   
}
{
   n0=ResultType()
   n1=Identifier()
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Type()
   n5=Identifier()
   n7=")" { n6 = JTBToolkit.makeNodeToken(n7); }
   n9=";" { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new InterfaceMember(n0,n1,n2,n4,n5,n6,n8); }
}

Type Type() :
{
   NodeChoice n0;
   BooleanType n1;
   IntegerType n2;
   Identifier n3;

   
}
{
   (
      n1=BooleanType()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=IntegerType()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=Identifier()
      { n0 = new NodeChoice(n3, 2); }
   )
   
   { return new Type(n0); }
}

BooleanType BooleanType() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="boolean" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new BooleanType(n0); }
}

IntegerType IntegerType() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="int" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new IntegerType(n0); }
}

ResultType ResultType() :
{
   NodeChoice n0;
   VoidType n1;
   Type n2;

   
}
{
   (
      n1=VoidType()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=Type()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new ResultType(n0); }
}

VoidType VoidType() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="void" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new VoidType(n0); }
}

Identifier Identifier() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new Identifier(n0); }
}
